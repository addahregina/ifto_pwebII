1 -> 1   a classe de origem recebe a de destino.
:: unidirecional: Em cima do atributo   @OneToOne  @JoinColum(name="id_classname")
:: bidirecional: as duas classes tem o id de ambos  @OneToOne(mappedBy="classname") //define de o lado que fica a  chave estrangeira, no lado fraco
   - o hibernate encontra todos que estão relacionados ao lado fraco
1 -> *   * recebe a chave estrangeira
@OneToMany private List<ClassName> classeName(s);
- o lado * é dominante, @ManyToOne  private ClassName classname;
- 1 @OneToMany(mappedBy="ClassName*") 
private List<ClassName> classeName(s);

* -> *   cria uma terceira tabela 
@ManyToMany(mappedBy="className") (lado fraco)
@


//não é para usar joinColumn(name="");

criar os lists (na lista de pacientes, adicionar link para todas as consulas do paciente, duas views: paciente e paciente_consulta (O mesmo para médiocos.))
adicionar dados por import .sql



Notas de aula 2/2/2023.

- Apresentação da disciplina
- Config. do ambiente de desenvolvimento.
- Aplicação com Spring Boot e Thymeleaf
- IDE Intellij~ community

https://start.spring.io/ (para adicionar novas dependencias ao projeto, pesquinar e copiar o codigo em explore.)
maven, java
conferir versão java -version (lab. java 11, spring boot 2.7.8)
Dependencias:
thymeleaf
spring web
dev tools
Ativar no Intellij:
pom.xml
File -> Settings -> Advanced Settings -> Compiler -> allow automake to start...)
File -> Settings -> Build,Execution, Deployment -> Compiler -> Build project automatically


AULA 9/02

https://fagno.github.io/pwebii-spring-ifto/jpa/
https://fagno.github.io/pwebii-spring-ifto/

fazer CRUD com jdbc e jpa

AULA 2/3
REPOSITORIO SUBSTITUI DAO
PESSOADAO -> ProdutoRepository

model.dao -> model.repository
model.entity
controller
model.conexao

datasource -> applications.properties

jpa não precisa da classe conexão


//aula 09/03
class Produto{
String descricao;
double valor;
}

class itemVenda{
@oneToOne
 Produto produto;
 double qtd;
 
 /*
 @ManyToOne
Venda venda;
*/
 double total(){}
}

public class Venda{

  LocalDate data;
  @oneToMany //(mappedBy = "atributo") se for bidirecional; sempre fica do lado fraco
  List<ItemVenda> itens;
  
  venda(){
  itens = new ArrayList<>()
  }
  
   double total(){}
}


no carrinho
&{session.vendas.itens}
não precisa enviar o objeto para view
